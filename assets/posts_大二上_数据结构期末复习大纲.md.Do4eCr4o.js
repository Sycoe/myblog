import{_ as r,c as t,o as l,af as o}from"./chunks/framework.B0E2DVLT.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/大二上/数据结构期末复习大纲.md","filePath":"posts/大二上/数据结构期末复习大纲.md"}'),i={name:"posts/大二上/数据结构期末复习大纲.md"};function n(s,a,e,h,_,g){return l(),t("div",null,a[0]||(a[0]=[o('<h2 id="_1-线性结构" tabindex="-1">1. 线性结构 <a class="header-anchor" href="#_1-线性结构" aria-label="Permalink to &quot;1. 线性结构&quot;">​</a></h2><h3 id="_1-1-单链表操作" tabindex="-1">1.1 单链表操作 <a class="header-anchor" href="#_1-1-单链表操作" aria-label="Permalink to &quot;1.1 单链表操作&quot;">​</a></h3><ul><li><strong>插入节点</strong>：在链表的指定位置插入新节点。</li><li><strong>删除节点</strong>：删除链表中的指定节点。</li><li><strong>链表遍历</strong>：遍历链表，访问链表中的每个节点。</li></ul><h3 id="_1-2-栈和队列" tabindex="-1">1.2 栈和队列 <a class="header-anchor" href="#_1-2-栈和队列" aria-label="Permalink to &quot;1.2 栈和队列&quot;">​</a></h3><ul><li><strong>特性</strong>：栈后进先出（LIFO） 队列先进先出（FIFO）</li><li><strong>循环队列</strong>：解决队列假溢出的问题。</li></ul><h2 id="_2-排序和搜索" tabindex="-1">2. 排序和搜索 <a class="header-anchor" href="#_2-排序和搜索" aria-label="Permalink to &quot;2. 排序和搜索&quot;">​</a></h2><ul><li><strong>快速排序</strong>：掌握其基本思想及实现。</li><li><strong>归并排序</strong>：理解其分治策略及实现。</li><li><strong>二分搜索</strong>：在有序数组中查找特定元素的算法。</li><li><strong>散列查找</strong>：了解散列函数的选择、冲突解决方法。</li></ul><h2 id="_3-树结构" tabindex="-1">3. 树结构 <a class="header-anchor" href="#_3-树结构" aria-label="Permalink to &quot;3. 树结构&quot;">​</a></h2><ul><li><strong>二叉树遍历</strong>：先序、中序、后序遍历。</li><li><strong>完全二叉树</strong>：理解完全二叉树的性质。</li><li><strong>哈夫曼树</strong>：带权路径长度最短的二叉树，了解其构造方法及应用。</li></ul><h2 id="_4-图结构" tabindex="-1">4. 图结构 <a class="header-anchor" href="#_4-图结构" aria-label="Permalink to &quot;4. 图结构&quot;">​</a></h2><ul><li><strong>图的表示和遍历</strong>：邻接矩阵、邻接表、深度优先搜索（DFS）和广度优先搜索（BFS）。</li><li><strong>最小生成树和最短路径</strong>：了解Prim算法、Kruskal算法、Dijkstra算法和Floyd算法。</li></ul><h2 id="_5-字符串处理" tabindex="-1">5. 字符串处理 <a class="header-anchor" href="#_5-字符串处理" aria-label="Permalink to &quot;5. 字符串处理&quot;">​</a></h2><ul><li><strong>字符串匹配算法</strong>：了解朴素的模式匹配算法和KMP算法。</li></ul><h2 id="_6-基本概念和操作" tabindex="-1">6. 基本概念和操作 <a class="header-anchor" href="#_6-基本概念和操作" aria-label="Permalink to &quot;6. 基本概念和操作&quot;">​</a></h2><ul><li><strong>数据的基本单位</strong>：数据项、数据元素、数据对象。</li><li><strong>算法的时间复杂度与空间复杂度</strong>：理解时间复杂度和空间复杂度的基本概念及其计算方法。</li></ul><h2 id="_7-算法设计与分析" tabindex="-1">7. 算法设计与分析 <a class="header-anchor" href="#_7-算法设计与分析" aria-label="Permalink to &quot;7. 算法设计与分析&quot;">​</a></h2><ul><li><strong>贪心算法</strong>：了解其基本原理及应用。</li><li><strong>动态规划</strong>：理解其基本原理及解决问题的步骤。</li><li><strong>回溯算法</strong>：了解其基本思想及应用场景。</li></ul><h2 id="_8-其他重要概念" tabindex="-1">8. 其他重要概念 <a class="header-anchor" href="#_8-其他重要概念" aria-label="Permalink to &quot;8. 其他重要概念&quot;">​</a></h2><ul><li><strong>抽象数据类型（ADT）</strong>：理解数据对象、数据关系及操作集合的概念。</li><li><strong>散列函数</strong>：理解散列函数的作用及其设计原则。</li><li><strong>稀疏矩阵</strong>：理解稀疏矩阵及其压缩存储方式。</li></ul>',19)]))}const c=r(i,[["render",n]]);export{d as __pageData,c as default};
