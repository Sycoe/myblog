import{_ as i,c as a,o as t,af as o}from"./chunks/framework.B0E2DVLT.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/大二下/微机原理/微机原理最终版.md","filePath":"posts/大二下/微机原理/微机原理最终版.md"}'),e={name:"posts/大二下/微机原理/微机原理最终版.md"};function s(r,l,n,p,u,d){return t(),a("div",null,l[0]||(l[0]=[o('<h2 id="一、填空题" tabindex="-1">一、填空题 <a class="header-anchor" href="#一、填空题" aria-label="Permalink to &quot;一、填空题&quot;">​</a></h2><ol><li><p><strong>8086 CPU 组成与功能</strong></p><ul><li>集成的两种功能单元: 指令执行单元 (EU) 和 总线接口单元 (BIU)。</li><li>响应外部中断时，由 INTA 引脚送出 2 个负脉冲。</li><li>许多引线具有双重定义和功能，采用分时复用方式工作。</li><li>DRAM 芯片地址引线特点: 复用。</li><li>读程序的内存地址计算方式: CS * 16 + IP。</li><li>一条指令包括 操作码 和 操作数 两部分。</li><li>指令队列长度: 8086 为 6，8088 为 4。</li><li>系统总线分为: 地址总线、数据总线、控制总线。</li></ul></li><li><p><strong>寄存器与总线</strong></p><ul><li>段寄存器的功能: 存储段地址用于分段管理。</li><li>程序计数器 (PC) 作用: 保存下一条指令的地址。</li><li>标志寄存器作用: 保存运算结果的状态信息。</li><li>8086CPU 的工作方式: 采用分段方式，对内存空间进行分段管理。</li><li>ALE 作用: 地址锁存使能。</li><li>Ready 作用: 用于等待状态指示。</li></ul></li><li><p><strong>存储器与中断</strong></p><ul><li>随机存储器 (RAM) 包括: DRAM 和 SRAM。</li><li>8086系统的断点保护: 防止未预期的程序终止。</li><li>8086 中断向量表的作用: 建立中断请求码和中断向量的联系，共包含 256 个入口地址。</li></ul></li></ol><h2 id="二、选择题" tabindex="-1">二、选择题 <a class="header-anchor" href="#二、选择题" aria-label="Permalink to &quot;二、选择题&quot;">​</a></h2><ol><li><p><strong>系统总线</strong></p><ul><li>系统总线分为: 地址总线、数据总线、控制总线。</li><li>8086(8088)CPU 集成了两种功能单元: 指令执行单元 (EU) 和 总线接口单元 (BIU)。</li><li>8086 CPU 包含的段寄存器: CS、DS、SS、ES。</li><li>Ready 信号线作用: 用于等待状态指示。</li></ul></li><li><p><strong>寄存器与寻址</strong></p><ul><li>8086 的通用寄存器个数: 8。</li><li>进行主存寻址时，用物理地址进行一组数据存取。</li><li>CPU 与外设传送数据的方式: 中断驱动方式提高效率。</li><li>8086 中断向量表有 256 个程序入口。</li><li>8259 采用初始化命令字设置中断向量码。</li></ul></li></ol><h2 id="三、简答题" tabindex="-1">三、简答题 <a class="header-anchor" href="#三、简答题" aria-label="Permalink to &quot;三、简答题&quot;">​</a></h2><ol><li><p><strong>段寄存器与寻址</strong></p><ul><li>8086 中的段寄存器包括 CS、DS、SS、ES，其功能分别是代码段、数据段、栈段和附加段管理。</li><li>8086 寻址范围可达 1MB，通过分段方式实现，每个段最大 64KB。</li><li>部分地址译码电路存在问题的解决方法: 通过具体实例说明如何正确译码。</li></ul></li><li><p><strong>总线周期</strong></p><ul><li>总线长度取决于: 总线结构和设备性能。</li><li>8086 读写总线周期: 读周期和写周期的具体时序图和分析。</li></ul></li></ol><h2 id="四、计算分析题" tabindex="-1">四、计算分析题 <a class="header-anchor" href="#四、计算分析题" aria-label="Permalink to &quot;四、计算分析题&quot;">​</a></h2><ol><li><p><strong>物理地址计算</strong></p><ul><li>给定寄存器和偏移量，计算指令中的数据所在物理地址。</li><li>例如: BX=0158H, DI=10A5H，位移量=1B57H，DS=2100H, SS=1100H, BP=1011H。<div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MOV AX [1B57H], MOV AX, [BX], MOV AX ,[BP+1B57H], MOV AX, [BX] [DI], MOV AX, [BP+DI+1B57H]</span></span></code></pre></div></li></ul></li><li><p><strong>总线连接图</strong></p><ul><li>用两片 6116 连接到 8086 CPU，以实现 16 位数据的读写。</li><li>设计三片中断控制芯片 8259 实现对 22 个屏蔽中断请求的管理，并说明芯片配置和中断请求响应过程。</li></ul></li></ol><h2 id="五、设计题" tabindex="-1">五、设计题 <a class="header-anchor" href="#五、设计题" aria-label="Permalink to &quot;五、设计题&quot;">​</a></h2><ol><li>设计 74LS138 地址译码电路，实现多片 6264 RAM 的连接。</li><li>画出 8259 的初始化编程和中断向量码设置，分析级联下多个 8259 的连接图和中断处理过程。</li></ol>',10)]))}const _=i(e,[["render",s]]);export{c as __pageData,_ as default};
