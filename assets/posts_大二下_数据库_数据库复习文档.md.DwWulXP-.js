import{_ as a,c as i,o as r,af as t}from"./chunks/framework.B0E2DVLT.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/大二下/数据库/数据库复习文档.md","filePath":"posts/大二下/数据库/数据库复习文档.md"}'),o={name:"posts/大二下/数据库/数据库复习文档.md"};function n(e,l,s,h,u,g){return r(),i("div",null,l[0]||(l[0]=[t('<h2 id="一、数据库概述" tabindex="-1">一、数据库概述 <a class="header-anchor" href="#一、数据库概述" aria-label="Permalink to &quot;一、数据库概述&quot;">​</a></h2><h3 id="_1-数据管理技术的发展" tabindex="-1">1. 数据管理技术的发展 <a class="header-anchor" href="#_1-数据管理技术的发展" aria-label="Permalink to &quot;1. 数据管理技术的发展&quot;">​</a></h3><ul><li><strong>人工管理</strong><ul><li>优点：简单直接</li><li>缺点：效率低、数据冗余、数据一致性差</li></ul></li><li><strong>文件系统</strong><ul><li>优点：数据集中管理、部分提高了效率</li><li>缺点：数据共享性差、数据独立性差、数据冗余依旧存在</li></ul></li><li><strong>数据库系统</strong><ul><li>优点：数据共享性好、数据独立性强、减少数据冗余、提高数据一致性</li><li>缺点：系统复杂、成本高</li></ul></li></ul><h3 id="_2-数据模型的要素" tabindex="-1">2. 数据模型的要素 <a class="header-anchor" href="#_2-数据模型的要素" aria-label="Permalink to &quot;2. 数据模型的要素&quot;">​</a></h3><ul><li><strong>实体</strong>：真实存在的事物或对象</li><li><strong>属性</strong>：实体的特征或描述</li><li><strong>联系</strong>：实体之间的关系</li><li><strong>E-R图</strong>：实体-联系图，用于表示实体、属性和联系</li></ul><h3 id="_3-常用数据模型" tabindex="-1">3. 常用数据模型 <a class="header-anchor" href="#_3-常用数据模型" aria-label="Permalink to &quot;3. 常用数据模型&quot;">​</a></h3><ul><li><strong>层次模型</strong><ul><li>特点：数据以树状结构表示，层次清晰</li></ul></li><li><strong>网络模型</strong><ul><li>特点：数据以图结构表示，节点可以有多条路径</li></ul></li><li><strong>关系模型</strong><ul><li>特点：数据以表结构表示，灵活性高，容易操作</li></ul></li></ul><h2 id="二、关系数据模型" tabindex="-1">二、关系数据模型 <a class="header-anchor" href="#二、关系数据模型" aria-label="Permalink to &quot;二、关系数据模型&quot;">​</a></h2><h3 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1. 基本概念&quot;">​</a></h3><ul><li><strong>属性</strong>：数据表的列</li><li><strong>元组</strong>：数据表的一行</li><li><strong>分量</strong>：元组中的一个值</li><li><strong>主码</strong>：唯一标识元组的属性或属性组</li><li><strong>域</strong>：属性的取值范围</li><li><strong>关系模式</strong>：关系的逻辑结构定义</li></ul><h3 id="_2-关系模型的三级模式结构" tabindex="-1">2. 关系模型的三级模式结构 <a class="header-anchor" href="#_2-关系模型的三级模式结构" aria-label="Permalink to &quot;2. 关系模型的三级模式结构&quot;">​</a></h3><ul><li><strong>外模式</strong>：用户视图</li><li><strong>概念模式</strong>：全局逻辑视图</li><li><strong>内模式</strong>：物理存储视图</li></ul><h3 id="_3-关系模型的性质" tabindex="-1">3. 关系模型的性质 <a class="header-anchor" href="#_3-关系模型的性质" aria-label="Permalink to &quot;3. 关系模型的性质&quot;">​</a></h3><ul><li><strong>域</strong>：定义属性的取值范围</li><li><strong>笛卡儿积</strong>：关系的所有可能元组的集合</li><li><strong>候选码</strong>：能够唯一标识元组的属性或属性组</li><li><strong>外码</strong>：引用其他表主码的属性</li></ul><h2 id="三、关系代数" tabindex="-1">三、关系代数 <a class="header-anchor" href="#三、关系代数" aria-label="Permalink to &quot;三、关系代数&quot;">​</a></h2><h3 id="_1-关系代数运算" tabindex="-1">1. 关系代数运算 <a class="header-anchor" href="#_1-关系代数运算" aria-label="Permalink to &quot;1. 关系代数运算&quot;">​</a></h3><ul><li><strong>选择</strong>：σ，用于选择满足条件的元组</li><li><strong>投影</strong>：π，用于选择某些属性</li><li><strong>连接</strong>：⨝，用于将两个关系按条件组合 <ul><li><strong>等值连接</strong>：条件是相等</li><li><strong>自然连接</strong>：相同属性值相等</li><li><strong>外连接</strong>：保留不满足连接条件的元组（左外连接、右外连接、全外连接）</li></ul></li><li><strong>集合运算</strong>：并（∪）、交（∩）、差（−）、乘（×）</li></ul><h3 id="_2-关系代数应用" tabindex="-1">2. 关系代数应用 <a class="header-anchor" href="#_2-关系代数应用" aria-label="Permalink to &quot;2. 关系代数应用&quot;">​</a></h3><ul><li>查询特定需求的关系代数表达式 <ul><li>例如：求特定日期生日的学生信息、期末成绩不及格学生的家长联系方式</li></ul></li></ul><h2 id="四、sql-结构化查询语言" tabindex="-1">四、SQL（结构化查询语言） <a class="header-anchor" href="#四、sql-结构化查询语言" aria-label="Permalink to &quot;四、SQL（结构化查询语言）&quot;">​</a></h2><h3 id="_1-基本操作" tabindex="-1">1. 基本操作 <a class="header-anchor" href="#_1-基本操作" aria-label="Permalink to &quot;1. 基本操作&quot;">​</a></h3><ul><li><strong>创建模式</strong>：CREATE SCHEMA</li><li><strong>删除模式</strong>：DROP SCHEMA</li><li><strong>创建表</strong>：CREATE TABLE</li><li><strong>创建视图</strong>：CREATE VIEW</li><li><strong>查询</strong>：SELECT</li><li><strong>更新</strong>：UPDATE</li><li><strong>删除</strong>：DELETE</li></ul><h3 id="_2-复杂应用" tabindex="-1">2. 复杂应用 <a class="header-anchor" href="#_2-复杂应用" aria-label="Permalink to &quot;2. 复杂应用&quot;">​</a></h3><ul><li>设计一个电影数据库 <ul><li>演员可以参演多部电影，每部电影有多种类型</li><li>E-R图、创建数据表的SQL语句、复杂查询的关系代数表达式和SQL语句</li></ul></li></ul><h2 id="五、数据库安全" tabindex="-1">五、数据库安全 <a class="header-anchor" href="#五、数据库安全" aria-label="Permalink to &quot;五、数据库安全&quot;">​</a></h2><h3 id="_1-存取控制" tabindex="-1">1. 存取控制 <a class="header-anchor" href="#_1-存取控制" aria-label="Permalink to &quot;1. 存取控制&quot;">​</a></h3><ul><li><strong>自主存取控制</strong>：基于权限的控制</li><li><strong>强制存取控制</strong>：基于规则的控制</li><li><strong>授权</strong>：GRANT</li><li><strong>回收</strong>：REVOKE</li></ul><h3 id="_2-多用户管理" tabindex="-1">2. 多用户管理 <a class="header-anchor" href="#_2-多用户管理" aria-label="Permalink to &quot;2. 多用户管理&quot;">​</a></h3><ul><li>创建用户、视图和进行授权管理</li></ul><h2 id="六、数据库完整性" tabindex="-1">六、数据库完整性 <a class="header-anchor" href="#六、数据库完整性" aria-label="Permalink to &quot;六、数据库完整性&quot;">​</a></h2><h3 id="_1-完整性约束" tabindex="-1">1. 完整性约束 <a class="header-anchor" href="#_1-完整性约束" aria-label="Permalink to &quot;1. 完整性约束&quot;">​</a></h3><ul><li><strong>实体完整性</strong>：主码不能为空</li><li><strong>参照完整性</strong>：外码必须引用有效的主码</li><li><strong>用户定义完整性</strong>：CHECK子句</li></ul><h3 id="_2-具体应用" tabindex="-1">2. 具体应用 <a class="header-anchor" href="#_2-具体应用" aria-label="Permalink to &quot;2. 具体应用&quot;">​</a></h3><ul><li>创建断言和触发器，例如约束性别输入、出生年月等</li></ul><h2 id="七、关系理论" tabindex="-1">七、关系理论 <a class="header-anchor" href="#七、关系理论" aria-label="Permalink to &quot;七、关系理论&quot;">​</a></h2><h3 id="_1-范式理论" tabindex="-1">1. 范式理论 <a class="header-anchor" href="#_1-范式理论" aria-label="Permalink to &quot;1. 范式理论&quot;">​</a></h3><ul><li><strong>第一范式（1NF）</strong>：所有属性都是原子值</li><li><strong>第二范式（2NF）</strong>：1NF基础上，非主属性完全依赖于主码</li><li><strong>第三范式（3NF）</strong>：2NF基础上，消除传递依赖</li></ul><h3 id="_2-综合应用" tabindex="-1">2. 综合应用 <a class="header-anchor" href="#_2-综合应用" aria-label="Permalink to &quot;2. 综合应用&quot;">​</a></h3><ul><li>从E-R模型到SQL语句的转化</li><li>多表查询中的关系代数和SQL语句应用</li></ul>',39)]))}const c=a(o,[["render",n]]);export{_ as __pageData,c as default};
