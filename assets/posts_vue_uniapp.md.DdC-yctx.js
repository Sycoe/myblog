import{_ as i,c as a,o as n,af as p}from"./chunks/framework.B0E2DVLT.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/vue/uniapp.md","filePath":"posts/vue/uniapp.md"}'),l={name:"posts/vue/uniapp.md"};function t(e,s,h,k,d,E){return n(),a("div",null,s[0]||(s[0]=[p(`<p>下面给你一个最精简的 uni‑app 项目目录结构和常用文件说明，你用午休的时间快速扫一遍，下班后再细细琢磨也不迟。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HelloUniApp/            ← 项目根目录</span></span>
<span class="line"><span>├── pages/              ← 页面目录</span></span>
<span class="line"><span>│   ├── index/          ← “首页” 页面</span></span>
<span class="line"><span>│   │   └── index.vue   ← 模板 + 逻辑 + 样式（单文件组件）</span></span>
<span class="line"><span>│   └── about/          ← 你新增的“关于”页面</span></span>
<span class="line"><span>│       └── about.vue</span></span>
<span class="line"><span>├── components/         ← 可复用组件</span></span>
<span class="line"><span>│   └── MyButton.vue    ← 自定义按钮组件</span></span>
<span class="line"><span>├── static/             ← 打包后原封不动拷贝的静态资源（图片／字体）</span></span>
<span class="line"><span>├── utils/              ← 工具库、请求封装、常量</span></span>
<span class="line"><span>│   └── request.js</span></span>
<span class="line"><span>├── unpackage/          ← 编译输出目录，平时不用管</span></span>
<span class="line"><span>├── App.vue             ← 全局布局、vue 根组件</span></span>
<span class="line"><span>├── main.js             ← 挂载 App.vue、初始化插件</span></span>
<span class="line"><span>├── pages.json          ← 所有页面路由、导航栏标题、窗口表现</span></span>
<span class="line"><span>├── manifest.json       ← 应用发行配置（AppID、平台信息）</span></span>
<span class="line"><span>└── package.json        ← 依赖列表、脚本命令</span></span></code></pre></div><hr><h3 id="_1-新增页面-放在-pages" tabindex="-1">1. 新增页面（放在 <code>pages/</code> ） <a class="header-anchor" href="#_1-新增页面-放在-pages" aria-label="Permalink to &quot;1. 新增页面（放在 \`pages/\` ）&quot;">​</a></h3><ol><li><p>在 <code>pages/</code> 下新建一个目录，比如 <code>pages/profile/</code></p></li><li><p>在该目录里建 <code>profile.vue</code>，里面写：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是我的个人页&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>打开 <code>pages.json</code>，在 <code>&quot;pages&quot;</code> 数组里添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/profile/profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;navigationBarTitleText&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;个人页&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><h3 id="_2-新增组件-放在-components" tabindex="-1">2. 新增组件（放在 <code>components/</code> ） <a class="header-anchor" href="#_2-新增组件-放在-components" aria-label="Permalink to &quot;2. 新增组件（放在 \`components/\` ）&quot;">​</a></h3><ol><li><p>在 <code>components/</code> 下新建 <code>MyCard.vue</code></p></li><li><p>编写通用结构和样式：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;card&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.card</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>在页面里引用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/components/MyCard.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: { MyCard }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><h3 id="_3-公共样式-入口-app-vue、main-js" tabindex="-1">3. 公共样式 &amp; 入口（<code>App.vue</code>、<code>main.js</code>） <a class="header-anchor" href="#_3-公共样式-入口-app-vue、main-js" aria-label="Permalink to &quot;3. 公共样式 &amp; 入口（\`App.vue\`、\`main.js\`）&quot;">​</a></h3><ul><li><p><strong>App.vue</strong>：放全局样式、全局组件</p></li><li><p><strong>main.js</strong>：挂载根组件、引入 Vue 插件（如状态管理、请求封装）</p></li></ul><hr><h3 id="_4-封装请求-utils-request-js" tabindex="-1">4. 封装请求（<code>utils/request.js</code>） <a class="header-anchor" href="#_4-封装请求-utils-request-js" aria-label="Permalink to &quot;4. 封装请求（\`utils/request.js\`）&quot;">​</a></h3><p>在 <code>utils/request.js</code> 里写：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ url, data, method })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在页面中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/request.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="_5-静态资源-static" tabindex="-1">5. 静态资源（<code>static/</code>） <a class="header-anchor" href="#_5-静态资源-static" aria-label="Permalink to &quot;5. 静态资源（\`static/\`）&quot;">​</a></h3><p>把图片、字体、第三方库等直接放 <code>static/</code>，在代码里用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">image</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/logo.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><hr><h3 id="快速小结" tabindex="-1">快速小结 <a class="header-anchor" href="#快速小结" aria-label="Permalink to &quot;快速小结&quot;">​</a></h3><ol><li><p><strong>每个页面一个文件夹 + <code>.vue</code></strong> → 注册到 <code>pages.json</code></p></li><li><p><strong>可复用 UI 写到 <code>components/</code></strong> → 在页面里 <code>import</code> + <code>components</code> 注册</p></li><li><p><strong>公共逻辑／请求封装放 <code>utils/</code></strong></p></li><li><p><strong>静态资源放 <code>static/</code></strong>，取用路径不带 <code>@</code></p></li><li><p><strong>全局设置在 <code>App.vue</code> + <code>main.js</code></strong>，编译和发行看 <code>manifest.json</code></p></li></ol><p>HBuilderX 和命令行脚手架其实生成的是两种「不同定位」的项目：</p><ol><li><p><strong>HBuilderX 默认模板（无 package.json）</strong></p><ul><li><p>HBuilderX 内置了 uni‑app 的运行时和打包能力，所以它给你的是一个「纯 HBuilderX 可用」的项目，你直接在编辑器里就能跑，无需通过 npm 安装依赖。</p></li><li><p>这种项目对接 CI/CLI、使用第三方 npm 包就不太方便——因为它没管理依赖的 <code>package.json</code>，也不存在 <code>node_modules</code>。</p></li></ul></li><li><p><strong>命令行脚手架（带 package.json）</strong></p><ul><li><p>命令行模式（<code>npx @dcloudio/uni-app-cli init …</code> 或 <code>vue create -p dcloudio/uni-preset-vue …</code>）生成的是一个「标准 npm＋Node.js」项目：</p><ul><li><p>带 <code>package.json</code>、<code>node_modules</code>，可以用 <code>npm install</code> 安装/管理第三方包</p></li><li><p>可以直接在 VS Code、GitHub Actions、Jenkins 等环境下执行 <code>npm run dev:mp-weixin</code>、<code>npm run build:h5</code></p></li></ul></li><li><p>更适合团队协作、CI/CD 自动化。</p></li></ul></li></ol><hr><h2 id="如果你想让-hbuilderx-项目也带上-package-json" tabindex="-1">如果你想让 HBuilderX 项目也带上 package.json <a class="header-anchor" href="#如果你想让-hbuilderx-项目也带上-package-json" aria-label="Permalink to &quot;如果你想让 HBuilderX 项目也带上 package.json&quot;">​</a></h2><ol><li><p><strong>打开 HBuilderX 的「工具 → NPM 安装管理」</strong></p><ul><li><p>会自动在项目里生成 <code>package.json</code>，并把 uni‑app 的核心依赖写进去。</p></li><li><p>之后你就能在项目根目录用 <code>npm install</code>／<code>npm update</code> 管理包了。</p></li></ul></li><li><p><strong>手动初始化</strong></p><ul><li><p>在项目根目录打开终端，执行 <code>npm init -y</code>，生成一个最简 <code>package.json</code>。</p></li><li><p>然后根据需要 <code>npm install uni-app</code>（或其他库）并在 <code>package.json</code> 的 <code>dependencies</code> 里看到它。</p></li></ul></li></ol><hr><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li><p><strong>想要简洁、零配置</strong> → 用 HBuilderX 默认模板（但没有 npm 管理）</p></li><li><p><strong>想要 npm 生态、CI/CD、VS Code 一体化</strong> → 用命令行脚手架，或在 HBuilderX 项目中开启 NPM 安装管理</p></li></ul><p>根据你后续要接入的第三方包、构建工具链和自动化流程，挑选最适合团队的方式就好。</p>`,33)]))}const c=i(l,[["render",t]]);export{r as __pageData,c as default};
